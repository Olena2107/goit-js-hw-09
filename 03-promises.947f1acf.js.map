{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,WAEgBC,SAASC,cAAc,SAE/BC,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAMC,iBACN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBI,MAAOC,EAAiBL,EAAjBK,KAAMC,EAAWN,EAAXM,OAKjBC,EAAaC,OAAOL,EAAMM,OAE1BC,EAAc,EACdC,EAAW,EAETC,EAAaC,aAAY,WAsBjC,IAAuBC,EAAUV,EArBzBM,IAAgBF,OAAOF,EAAOG,QAIlCC,GAAe,GAiBII,EAhBnBH,GAAY,EAgBiBP,EAfLG,EAgBnB,IAAIQ,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAACF,WAAUV,UAEnBa,EAAO,CAACH,WAAUV,S,GAEnBA,E,KAvBAiB,MAAK,SAAAC,G,IAAGR,EAAQQ,EAARR,SAAUV,EAAKkB,EAALlB,MACjBmB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANtB,EAAM,M,IAGjDuB,OAAM,SAAAL,G,IAAGR,EAAQQ,EAARR,SAAUV,EAAKkB,EAALlB,MAClBmB,EAAA9B,GAAS+B,OAAOI,QACd,sBAAqCF,OAAfZ,EAAS,QAAYY,OAANtB,EAAM,M,IAGjDG,GAAcC,OAAOH,EAAKI,QAhBxBoB,cAAcjB,E,GAiBf,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport flatpickr from 'flatpickr';\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n  // if (!delay.value || !step.value || !amount.value) {\n  //   return Notiflix.Notify.info('Fill in all fields');\n  // }\n  \n  let delayInput = Number(delay.value);\n\n  let amountValue = 0;\n  let position = 0;\n\n  const intervalId = setInterval(() => {\n    if (amountValue === Number(amount.value)) {\n      clearInterval(intervalId);\n      return;\n    }\n    amountValue += 1;\n    position += 1;\n    createPromise(position, delayInput)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delayInput += Number(step.value);\n  }, 0);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n  });\n}"],"names":["$6JpON","parcelRequire","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","delayInput","Number","value","amountValue","position1","intervalId","setInterval","position","Promise","resolve","reject","setTimeout","Math","random","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","clearInterval"],"version":3,"file":"03-promises.947f1acf.js.map"}